Tracy:

[X M ] Intercept system calls with ptrace(2)
[X M ] Hook system calls
[X MB] Read/Write system call arguments
[X MB] Inject system calls
[X M ] Asynchronous system call injection.
[X M ] Modify (and deny) system calls
[X  B] Efficiently read(and write?) child memory. (Use mmap and shared memory)
[/  B] Efficiently share (allow read) memory with the child (Use mmap and shared
       Memory)
[X M ] Means to conveniently store data per child/pid. (void* in tracy_child)
[X  B] (Optional) Attaching to running processes
[X MB] (Optional) Trace children as well. Default on Linux, needs hacks to work
       on *BSD, Solaris.
[X M ] Finish code that tests for fails. (Do we kill all childs on some
       failures?)
[X M ] Implement deny i.c.w. return code -ENOSYS, perhaps
       "unimplement_syscall"?

[X  B] Add interrupt handler to tracy_main().
[X M ] Documentation for tracy. (in sphinx and code)

[/ MB] API support for threads. (Not in tracy, but for threaded tracees)

Optional:
[    ] System call injection by signal. (Requires some changes to the injection
       functions as we can't use the current value of the PC)

Soxy:

[XJ  ] Working implementation of SOCKS 5 protocol
[XJMB] Hook some system calls, and perform required operations. We want to hook at
least: read(2), write(2), connect(2), getsockname(2), socket(2).
[XJMB] Keep track of FDs of sockets that we opened.
[XJ M] Implement support for IPv4 (IPv6 optional)
[XJ M] Implement support for TCP (UDP optional)
[  M ] Implement support for rule-based proxifying.

Documentation / Report

[XJMB] Proposal
[X M ] Tracy motivation
[X M ] Tracy API
[X M ] Tracy design decisions (ptrace caveats, platform support, arch support)
[ JMB] Soxy motivation
[ JMB] Soxy usage
[ JMB] Soxy design decisions

[\ M ] Final report
[X M ] Motivation Chapter
[X M ] Theory (ptrace explanation)
[X MB] Implementation (Tracy design decisions)
[/J  ] Soxy
[/ M ] Caveats / Discussion
[/ M ] Conclusion
[/ M ] Future work
[/ M ] Related work
[/ M ] References
